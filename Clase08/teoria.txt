NavBar de Bootstrap
2do Parcial

Todo local 
Hacer un ABM
Funciones de array -> Map - Filter - Reduce
    Parecidos a las consultas SQL
    Mostrar o no columnas segun un checkbox -> map
    Seleccionar un valor de la lista para mostrar valores -> filter
    Reduce un array a un unico numero, funciones de fila unica (count, avg); tienen que ser 1 solo numero de rta. -> reduce

    MAP -> array.prototype.map()
        Devuelve un nuevo array sin modificar el base
        EJ -> Arr.map(callback, thisArg])
        [1, 2, 3, 4].map( function(valorActual,indice,array{....}))
        Hace un foreach de un array, y a cada elemnto, del primero al ultimo, se los tira a la funcion callback (1er parametro)
            hace algo con el elemento y lo retorna, no toca el original

        //EJEMPLO
        var numeros = [1,2,3,4,5,6];
        var cuadrados = numeros.map (function (numero) )
        {
            return numero*numero;
        });
        //[1,4,9,16,25,36]

    FILTER-> array.prototype.filter()
        En vez de retornar 1 elemento, lo que hace es -> retorna true o false a traves del callback
            Si el callback es true, el elemento que devuelve pasa al array de salida

        //EJEMPLO
        var numeros=[1,2,3,4,5,6];
        var mayoresA3 = numeros.filter( function(numero))
        {
            return numero >3;
        });
        //[4,5,6]

    REDUCE -> array.prototype.reduce()
        Convierte al array en un solo valor
            arr.reduce(callback[ , initValue])
            arr.reduce( function(valorActual, valorAnterior, indiceActual, array{....}))
        //Metodo tradicional
            var numeros = [1,2,3,4,5,6];
            var total = 0;
            for(var i=0; i<numeros.length; i++)
            {
                total +=numeros[i];
            }
            //21 
        //EJEMPLO 
            var numeros = [1,2,3,4,5,6];
            var total = numeros.reduce (function (previo,actual)) 
            {
                return previo+actual;
            }, 0);
            //21

    //ENCADENO Funciones
        var mascotas = [
            {nombre: 'bobby',  tipo:'perro',  age:4},
            {nombre: 'morgan', tipo:'perro',  age:2},
            {nombre: 'michi',  tipo:'gato',   age:3},
            {nombre: 'billy',  tipo:'perro',  age:1},
            {nombre: 'rafael', tipo:'iguana', age:2}
        ];

        Total de la edad de perros:
        var TotalEdadPerros = mascotas
        .filter ( function(mascota) {mascota.tipo == 'perro'} )
        .map    ( function(mascota) {mascota.edad})
        .reduce ( function(previo,actual) {previo+actual},0);

        //7

    UNIQUE -> Valores unicos de una respuesta 
        //CLASICO
        var vector= [1,3,4,5,2,4,3,5];

        function unique(vec)
        {   
            var i;
            var out= [];
            var objeto={};

            for(i=0; i<vec.length; i++){
                objeto[vec[i]]=0;
            }

            for(i in objeto){    //i in objeto -> devuelve el indice de la primer ocurrencia 
                out.push(i);
            }
            return out;
        }

        //EJEMPLO
            array.prototype.unique= function(a){
                return function(){return this.filter(a)}} (function(a,b,c){return c.indexOf(a,b+1))<0  
            });   

LocalStorage
    SetItem
    GetItem